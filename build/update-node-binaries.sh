#!/bin/bash

# Script to extract GoReleaser build artifacts and update atom-updater-node binaries
#
# Usage: ./build/update-node-binaries.sh [--check-only]
#
# Options:
#   --check-only    Only check for archives without processing them
#
# This script:
# 1. Looks for tar.gz/zip files generated by GoReleaser in the dist/ directory
# 2. Extracts them to the appropriate platform directories in atom-updater-node/bin/
# 3. Cleans up the archive files after extraction
# 4. Sets executable permissions on the binaries

set -e

# Check for --check-only flag
CHECK_ONLY=false
if [ "$1" == "--check-only" ]; then
    CHECK_ONLY=true
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Project paths
PROJECT_ROOT=$(cd "$(dirname "$0")/.." && pwd)
DIST_DIR="$PROJECT_ROOT/dist"
NODE_BIN_DIR="$PROJECT_ROOT/atom-updater-node/bin"

echo -e "${GREEN}üîÑ Updating atom-updater-node binaries from GoReleaser artifacts...${NC}"

# Check if dist directory exists
if [ ! -d "$DIST_DIR" ]; then
    echo -e "${RED}‚ùå Error: dist/ directory not found. Run the release build first.${NC}"
    exit 1
fi

# Check if node bin directory exists
if [ ! -d "$NODE_BIN_DIR" ]; then
    echo -e "${RED}‚ùå Error: atom-updater-node/bin/ directory not found.${NC}"
    exit 1
fi

# Find all archive files (tar.gz and zip)
ARCHIVES=$(find "$DIST_DIR" -type f \( -name "*.tar.gz" -o -name "*.zip" \) | grep -v "source")

if [ -z "$ARCHIVES" ]; then
    if [ "$CHECK_ONLY" = true ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No archive files found in dist/.${NC}"
        exit 1
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No archive files found in dist/. Run GoReleaser build first.${NC}"
        exit 0
    fi
fi

echo -e "${GREEN}üì¶ Found archives:${NC}"
echo "$ARCHIVES" | sed 's/^/  - /'

# Process each archive (unless in check-only mode)
if [ "$CHECK_ONLY" = true ]; then
    echo -e "${GREEN}‚úÖ Found $(echo "$ARCHIVES" | wc -l) archive(s) ready for processing${NC}"
    echo -e "${GREEN}üì¶ Archive list:${NC}"
    echo "$ARCHIVES" | sed 's/^/  - /'
    exit 0
fi

while IFS= read -r archive; do
    echo -e "\n${YELLOW}üîç Processing: $(basename "$archive")${NC}"

    # Extract archive name without extension
    archive_name=$(basename "$archive")
    archive_no_ext="${archive_name%.*}"

    # Determine platform and architecture from filename
    # Format: atom-updater_{Platform}_{Architecture}
    if [[ "$archive_name" =~ atom-updater_([^_]+)_(.+)\.(tar\.gz|zip) ]]; then
        platform_raw="${BASH_REMATCH[1]}"
        arch_raw="${BASH_REMATCH[2]}"

        echo -e "  ${GREEN}üìã Parsed: platform=$platform_raw, arch=$arch_raw${NC}"

        # Map GoReleaser naming to our directory structure
        case "$platform_raw" in
            "Darwin") platform_dir="darwin" ;;
            "Linux") platform_dir="linux" ;;
            "Windows") platform_dir="win32" ;;
            *) echo -e "${RED}‚ùå Unknown platform: $platform_raw${NC}"; continue ;;
        esac

        case "$arch_raw" in
            "x86_64") arch_dir="x64" ;;
            "i386") arch_dir="ia32" ;;
            "arm64") arch_dir="arm64" ;;
            "amd64") arch_dir="x64" ;;
            "386") arch_dir="ia32" ;;
            "64") arch_dir="x64" ;;  # Handle cases like "Darwin_x86_64" -> "64"
            *) echo -e "${RED}‚ùå Unknown architecture: $arch_raw${NC}"; continue ;;
        esac

        target_dir="$NODE_BIN_DIR/$platform_dir/$arch_dir"

        echo -e "  ${GREEN}üìÇ Target: $target_dir${NC}"

        # Create target directory if it doesn't exist
        mkdir -p "$target_dir"

        # Extract archive to target directory
        if [[ "$archive" == *.tar.gz ]]; then
            echo -e "  ${GREEN}üì¶ Extracting tar.gz...${NC}"
            tar -xzf "$archive" -C "$target_dir"
        elif [[ "$archive" == *.zip ]]; then
            echo -e "  ${GREEN}üì¶ Extracting zip...${NC}"
            unzip -q "$archive" -d "$target_dir"
        fi

        # Set executable permissions on the binary
        binary_path="$target_dir/atom-updater"
        if [[ "$platform" == "windows" ]]; then
            binary_path="$target_dir/atom-updater.exe"
        fi

        if [ -f "$binary_path" ]; then
            chmod +x "$binary_path"
            echo -e "  ${GREEN}‚úÖ Binary extracted and permissions set${NC}"
        else
            echo -e "  ${RED}‚ùå Binary not found after extraction: $binary_path${NC}"
        fi

        # Keep the original archive file (don't delete it)
        echo -e "  ${GREEN}‚úÖ Archive processed and kept${NC}"

    else
        echo -e "  ${YELLOW}‚ö†Ô∏è  Skipping unrecognized archive: $archive_name${NC}"
    fi
done <<< "$ARCHIVES"

# Count total binaries installed
total_binaries=0

echo -e "\n${GREEN}üéâ Update complete!${NC}"

# Show summary of what was installed
echo -e "\n${GREEN}üìã Installation Summary:${NC}"
for platform_dir in "$NODE_BIN_DIR"/*/; do
    if [ -d "$platform_dir" ]; then
        platform=$(basename "$platform_dir")
        for arch_dir in "$platform_dir"/*/; do
            if [ -d "$arch_dir" ]; then
                arch=$(basename "$arch_dir")
                binary="$arch_dir/atom-updater"
                if [[ "$platform" == "win32" ]]; then
                    binary="$arch_dir/atom-updater.exe"
                fi

                if [ -f "$binary" ]; then
                    echo -e "  ${GREEN}‚úÖ $platform/$arch${NC}"
                    ((total_binaries++))
                fi
            fi
        done
    fi
done

echo -e "${GREEN}üìä Total binaries installed: $total_binaries${NC}"

echo -e "\n${GREEN}üöÄ atom-updater-node is ready to use!${NC}"